const URL = "https://teachablemachine.withgoogle.com/models/RiVYXVF9w/";

 let model, webcam, labelContainer, maxPredictions;
            var message = document.querySelector('.msg')
            // Load the image model and setup the webcam
            async function init() {
                const modelURL = URL + "model.json";
                const metadataURL = URL + "metadata.json";

                // load the model and metadata
                // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
                // or files from your local hard drive
                // Note: the pose library adds "tmImage" object to your window (window.tmImage)
                model = await tmImage.load(modelURL, metadataURL);
                maxPredictions = model.getTotalClasses();

                // Convenience function to setup a webcam
                const flip = true; // whether to flip the webcam
                webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
                await webcam.setup(); // request access to the webcam
                await webcam.play();
                window.requestAnimationFrame(loop);

                // append elements to the DOM
                document.getElementById("webcam-container").appendChild(webcam.canvas);
                labelContainer = document.getElementById("label-container");
                for (let i = 0; i < maxPredictions; i++) { // and class labels
                    labelContainer.appendChild(document.createElement("div"));
                }
            }

            async function loop() {
                webcam.update(); // update the webcam frame
                await predict();
                window.requestAnimationFrame(loop);
            }

            // run the webcam image through the image model
            async function predict() {
                // predict can take in an image, video or canvas html element

                const prediction = await model.predict(webcam.canvas);

                let highestProb = 0;
                let signName = "";

                prediction.forEach(function (pred) {
                    if (pred.probability > highestProb) {
                        highestProb = pred.probability;
                        signName = pred.className;
                    }
                });
                var increment;
                //if (highestProb > 0.95) {
                    console.log(signName);

                    if (signName.toLowerCase() === "{{location}}") {
                        labelContainer.innerHTML = signName;
                        //increment++
                    }
                    //if (increment === 3) {


                      //  message.innerHTML = "Done with your level!!"

                    //} else {

                        //message.innerHTML = "please try  again "

                   // }

                  //  }

                }
        </script>
    </div>